import { User } from 'auth0';
import { ICollectionDTO } from './dto';

export enum VideoProvider {
    TOKBOX = 'TOKBOX',
    TWILIO = 'TWILIO',
    AGORA = 'AGORA',
    UNKNOWN = 'UNKNOWN'
}
export enum SessionType {
    ClassSession = 'ClassSession',
    AdHocSession = 'AdHocSession', // Scheduled, ad-hoc
    GenericSession = 'GenericSession' // Impromptu (on-the-fly), not scheduled
}

export enum AdHocSessionType {
    ResearchInformation = 'Research Information',
    TechCheck = 'Tech Check',
    MeetYourInstructor = 'Meet Your Instructor',
    StudySurvey = 'Study Survey',
    Support = 'Support'
}

export const adHocSessionTypes = new Map<AdHocSessionType, string>([
    [AdHocSessionType.ResearchInformation, 'Research Information'],
    [AdHocSessionType.TechCheck, 'Tech Check'],
    [AdHocSessionType.MeetYourInstructor, 'Meet Your Instructor'],
    [AdHocSessionType.StudySurvey, 'Study Survey'],
    [AdHocSessionType.Support, 'Support']
]);

export enum LegacyAdHocSessionType {
    Consent = 'Consent',
    TechAssess = 'TechAssess',
    GoalsAssess = 'GoalsAssess',
    StudyAssess = 'StudyAssess'
}

export const legacyAdHocSessionTypes = new Map<LegacyAdHocSessionType, string>([
    [LegacyAdHocSessionType.Consent, 'Research Information'],
    [LegacyAdHocSessionType.TechAssess, 'Tech Check'],
    [LegacyAdHocSessionType.GoalsAssess, 'Meet Your Instructor'],
    [LegacyAdHocSessionType.StudyAssess, 'Study Survey']
]);

export interface IGenericSession {
    _id?: string;
    name: string;
    acronym: string;
    __t: SessionType;
    provider: VideoProvider;
    providerId: string;
    instructorId: string;
    date0Z: string;
    scheduledStartTime: string;
    scheduledEndTime: Date;
    lobbyOpenTime: Date;
    lobbyCloseTime: Date;
    tz: string;
    lobbyTimeMins: number;
    durationMins: number;
    helpMessage: string;
    program: string;

    instructorData: User; // User info for the instructor
    isOpenNow(now: any): boolean;
    opensAfterNow(now: any): boolean;
    inSession(now: any): boolean;
    setStartTime(
        startTime: Date,
        durationMins: Number,
        lobbyTimeMins: Number,
        tz: string
    ): void;
    // ui specific fields that are generated by ui
    formattedDateTime?: string;
    instructorNickname?: string;
    status?: string;
    dayOfWeek?: string;
    programShortName?: string;
}

export interface IClassSession extends IGenericSession {
    classId: string; // _id of the containing class
    seq: number; // Sequence number, starting with 1
    disableEmails?: boolean;
}

export interface IAdHocSession extends IGenericSession {
    sessionType: string;
    description: string; // Verbose description of the reason for the session
    capacity: number; // The maximum number of diads
    participants: string[]; // Students currently enrolled, in order of assigned seating
    notes?: string;
    dateDisplay?: string;
}

export interface IAdHocSessionsCollectionDTO
    extends ICollectionDTO<IAdHocSession> {}
